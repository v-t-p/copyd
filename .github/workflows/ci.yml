name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsystemd-dev \
          pkg-config \
          libudev-dev \
          build-essential \
          libssl-dev
          
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check code formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
      
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  build:
    name: Build Binaries
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: copyd-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: copyd-linux-aarch64
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsystemd-dev \
          pkg-config \
          libudev-dev \
          build-essential \
          libssl-dev
          
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binaries
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CC=aarch64-linux-gnu-gcc
          export PKG_CONFIG_ALLOW_CROSS=1
        fi
        cargo build --release --target ${{ matrix.target }}
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/copyd artifacts/
        cp target/${{ matrix.target }}/release/copyctl artifacts/
        cp README.md artifacts/
        cp DEVELOPMENT_STATUS.md artifacts/
        cp -r systemd artifacts/
        cp -r examples artifacts/
        
    - name: Create tarball
      run: |
        cd artifacts
        tar -czf ../${{ matrix.artifact_name }}.tar.gz *
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.tar.gz

  package:
    name: Create Packages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debhelper \
          devscripts \
          rpm \
          alien \
          fakeroot
          
    - name: Create Debian package
      run: |
        mkdir -p debian-package/usr/bin
        mkdir -p debian-package/usr/lib/systemd/system
        mkdir -p debian-package/usr/share/doc/copyd
        mkdir -p debian-package/DEBIAN
        
        # Extract binaries
        tar -xzf copyd-linux-x86_64/copyd-linux-x86_64.tar.gz -C debian-package/usr/bin --wildcards '*/copyd' '*/copyctl' --strip-components=1
        
        # Copy systemd files
        cp systemd/* debian-package/usr/lib/systemd/system/
        
        # Copy documentation
        cp README.md DEVELOPMENT_STATUS.md debian-package/usr/share/doc/copyd/
        
        # Create control file
        cat > debian-package/DEBIAN/control << EOF
        Package: copyd
        Version: ${GITHUB_REF#refs/tags/}
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: systemd, libc6
        Maintainer: copyd project
        Description: Modern, high-performance file copy daemon
         copyd is a modern replacement for cp/mv with daemon architecture,
         advanced copy engines, and comprehensive file management features.
        EOF
        
        # Create postinst script
        cat > debian-package/DEBIAN/postinst << EOF
        #!/bin/bash
        systemctl daemon-reload
        systemctl enable copyd.socket
        echo "copyd installed. Start with: systemctl start copyd.socket"
        EOF
        chmod +x debian-package/DEBIAN/postinst
        
        # Build package
        fakeroot dpkg-deb --build debian-package copyd_${GITHUB_REF#refs/tags/}_amd64.deb
        
    - name: Create RPM package
      run: |
        mkdir -p rpm-build/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
        
        # Create spec file
        cat > rpm-build/SPECS/copyd.spec << EOF
        Name: copyd
        Version: ${GITHUB_REF#refs/tags/}
        Release: 1%{?dist}
        Summary: Modern, high-performance file copy daemon
        License: MIT OR Apache-2.0
        URL: https://github.com/copyd-project/copyd
        
        %description
        copyd is a modern replacement for cp/mv with daemon architecture,
        advanced copy engines, and comprehensive file management features.
        
        %prep
        # No prep needed for binary package
        
        %build
        # No build needed for binary package
        
        %install
        mkdir -p %{buildroot}/usr/bin
        mkdir -p %{buildroot}/usr/lib/systemd/system
        mkdir -p %{buildroot}/usr/share/doc/copyd
        
        tar -xzf %{_sourcedir}/copyd-linux-x86_64.tar.gz -C %{buildroot}/usr/bin --wildcards '*/copyd' '*/copyctl' --strip-components=1
        cp %{_sourcedir}/systemd/* %{buildroot}/usr/lib/systemd/system/
        cp %{_sourcedir}/*.md %{buildroot}/usr/share/doc/copyd/
        
        %files
        /usr/bin/copyd
        /usr/bin/copyctl
        /usr/lib/systemd/system/copyd.service
        /usr/lib/systemd/system/copyd.socket
        /usr/share/doc/copyd/*
        
        %post
        systemctl daemon-reload
        systemctl enable copyd.socket
        
        %changelog
        * $(date +'%a %b %d %Y') GitHub Actions <actions@github.com> - ${GITHUB_REF#refs/tags/}-1
        - Automated build from GitHub release
        EOF
        
        # Copy sources
        cp copyd-linux-x86_64/copyd-linux-x86_64.tar.gz rpm-build/SOURCES/
        cp systemd/* rpm-build/SOURCES/
        cp *.md rpm-build/SOURCES/
        
        # Build RPM
        rpmbuild --define "_topdir $(pwd)/rpm-build" -bb rpm-build/SPECS/copyd.spec
        
        mv rpm-build/RPMS/x86_64/copyd-*.rpm ./
        
    - name: Upload packages to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          copyd_*_amd64.deb
          copyd-*.rpm
          copyd-linux-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Check for unsafe code
      run: |
        echo "Checking for unsafe code blocks:"
        if grep -r "unsafe" --include="*.rs" src/; then
          echo "WARNING: Found unsafe code blocks. Review required."
          exit 1
        else
          echo "No unsafe code blocks found."
        fi

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsystemd-dev \
          pkg-config \
          libudev-dev \
          build-essential \
          libssl-dev
          
    - name: Run performance tests
      run: |
        cargo test --release test_copy_performance_benchmark -- --nocapture
        
    - name: Generate test data and benchmark
      run: |
        # Create test files of various sizes
        mkdir -p /tmp/perf-test
        dd if=/dev/zero of=/tmp/perf-test/1mb.dat bs=1M count=1
        dd if=/dev/zero of=/tmp/perf-test/10mb.dat bs=1M count=10
        dd if=/dev/zero of=/tmp/perf-test/100mb.dat bs=1M count=100
        
        # Build and run basic benchmarks
        cargo build --release
        echo "Performance baseline established"

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsystemd-dev \
          pkg-config \
          libudev-dev
          
    - name: Build documentation
      run: |
        cargo doc --no-deps --document-private-items
        echo '<meta http-equiv="refresh" content="0; url=copyd">' > target/doc/index.html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: docs.copyd.dev 